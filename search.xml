<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[【原创】Tomcat8 安装和配置、优化]]></title>
    <url>%2F2017%2F05%2F16%2FTomcat-Install-And-Setting%2F</url>
    <content type="text"><![CDATA[[TOC] 一、 Tomcat 8 安装目标 安装环境：rebhat 6.1 (linux通用) 安装目录：/opt/extra/apache-tomcat-8.5.31 java目录：/opt/java/jdk1.8.0_91 启动方式：service tomcat8 start 或者 配置： 更新端口，可以增加数据源，配置系统服务，jvm参数，安全考虑，服务器优化二、 Tomcat 8 安装2.1. 安装来源以及简介 官网：http://tomcat.apache.org/ Tomcat 8 官网下载：http://tomcat.apache.org/download-80.cgi 此时（20180524） Tomcat 8 最新版本为：apache-tomcat-8.5.31.zip2.2. 安装目录 我个人习惯 /opt 目录下创建一个目录 software 用来存放各种软件安装包；在 /opt 目录下创建一个 apps 用来存放各种解压后的软件包，下面的讲解也都是基于此习惯。不过下面是公司的按照我会按照opt/extra/来。 压缩包解压：unzip apache-tomcat-8.5.31.zip 移到解压出来文件夹到 /usr 下：mv apache-tomcat-8.5.31/ /opt/extra/2.3. 更改端口（可跳过，根据需要修改） 1) 编辑tomcat配置文件 编辑tomcat配置文件$tomcat_home/conf/server.xml ，此处为：/opt/extra/apache-tomcat-8.5.31/conf/server.xml 2) 更改服务关闭端口 1&lt;Server port="8205" shutdown="SHUTDOWN"&gt; 3) 更改HTTP端口 123&lt;Connector port="8280" protocol="HTTP/1.1" connectionTimeout="20000" redirectPort="8643" /&gt; 4) 更改AJP端口（如无需用到，可注释掉） 1&lt;Connector port="8209" protocol="AJP/1.3" redirectPort="8643" /&gt; 2.4. 配置jdbc数据源（可跳过，根据需要修改） 1) 更新端口12345&lt;Resource name="test/b2c" auth="Container" driverClassName="oracle.jdbc.driver.OracleDriver" defaultAutoCommit="true" maxActive="20" maxWait="10000" initialSize="10" maxTotal="20" maxIdle="10" username="test_app_1" password="**********" type="javax.sql.DataSource" url="jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=xxx.xxx.xx1)(PORT=1521))(ADDRESS=(PROTOCOL=TCP)(HOST=xxx.xxx.xx2)(PORT=1521))(LOAD_BALANCE=on)(FAILOVER=on))(CONNECT_DATA=(SERVICE_NAME=service.xxxx.com)(FAILOVER_MODE=(TYPE=SELECT)(METHOD=BASIC))))" validationQuery="SELECT sysdate FROM dual" testOnBorrow="true"/&gt; 2.5. 配置启动脚本服务（官方推荐在$CATALINA_BASE/bin/setenv.sh） 1) 为避免环境冲突，配置变量。编辑vim /opt/extra/apache-tomcat-8.5.31/bin/setenv.sh 然后保存 (可选, 官方recommended这种。 或者在catalina.sh在配置文件的可编辑内容最上面添加) 123JRE_HOME=/opt/java/jdk1.8.0_91CATALINA_PID="$CATALINA_BASE/tomcat.pid"# CATALINA_PID=`cd ../;pwd`/tomcat.pid #或者这种方式 # 可以不用 JAVA_HOME=/opt/java/jdk1.8.0_91 2) 常用命令 启动 /opt/extra/apache-tomcat-8.5.31/catalina.sh start sh /opt/extra/apache-tomcat-8.5.31/bin/startup.sh ； 可以边启动边查看日志 ;sh /opt/extra/apache-tomcat-8.5.31/bin/startup.sh; tail -200f /usr/program/tomcat8/logs/catalina.out 关闭 sh /opt/extra/apache-tomcat-8.5.31/bin/shutdown.sh 或者 cat /opt/extra/apache-tomcat-8.5.31/tomcat.pid | xargs kill -9 或者 /opt/extra/apache-tomcat-8.5.31/bin/catalina.sh stop 查看服务 ps aux|grep tomcat|grep -v grep 2.6. 配置系统服务 1) 安装步骤一： 配置JSVC服务启动方式 （为什么要用，查看附录说明） 1234cd /opt/extra/apache-tomcat-8.5.31/bintar xvfz commons-daemon-native.tar.gzcd commons-daemon-1.1.0-native-src/unix./configure --with-java=/opt/java/jdk1.8.0_91 - ./configure易出现的问题 - 缺少编译工具，gcc等。需要安装。 过程可能会缺少对于的报，可以找原镜像按照 。 例如：缺少`/usr/lib64/libc.so`。查看`rpm -qf /usr/lib64/libc.so`, 安装：`rpm -ivh /mnt/rhiso1/Packages/glibc-devel-2.12-1.25.el6.x86_64.rpm` 2) 安装步骤二 123makecp jsvc ../..cd ../.. 3) 我们可以用daemon.sh脚本。其启动脚本的命令大致如下： 1234567891011CATALINA_BASE=$CATALINA_HOMEcd $CATALINA_HOME./bin/jsvc \ -classpath $CATALINA_HOME/bin/bootstrap.jar:$CATALINA_HOME/bin/tomcat-juli.jar \ -outfile $CATALINA_BASE/logs/catalina.out \ -errfile $CATALINA_BASE/logs/catalina.err \ -Dcatalina.home=$CATALINA_HOME \ -Dcatalina.base=$CATALINA_BASE \ -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager \ -Djava.util.logging.config.file=$CATALINA_BASE/conf/logging.properties \ org.apache.catalina.startup.Bootstrap 3) 我们可以用daemon.sh脚本。其启动脚本的命令大致如下：找到如下内容 123test ".$TOMCAT_USER" = . &amp;&amp; TOMCAT_USER=tomcat# Set JAVA_HOME to working JDK or JRE# 修改TOMCAT_USER=tomcat为你指定用来运行tomcat的用户名，去除JAVA_HOME前的注释（即“#”号），并设置为JDK的所在目录。 在文件靠前位置的注释中加入下面的内容 1# chkconfig: - 80 20 2.7. 配置日志 1) 在 Apache Tomcat 上运行的 Web 应用可以使用 系统日志 API，java.util.logging。 Java Servlets 规范所提供的日志 API，javax.servlet.ServletContext.log(…)。 各个应用可以使用不同的日志框架，详情参见类加载器。java.util.logging 则是例外。如果日志库直接或间接地用到了这一 API，那么 Web 应用就能共享使用它的元素，因为该 API 是由System类加载器所加载的。 （ Bootstrap–&gt;System–&gt;Common–&gt;Webapp1） Access 日志 Access 日志功能相近，但还是有所不同。它是一个 Valve，使用自包含的逻辑来编写日志文件。访问日志的基本需求是以较低开销处理大型连续数据流，所以只能使用 Commomns Logging 来处理自身的调试消息。这种实现方法避免了额外的开销，并且可能具有较复杂的配置。请参考 Valves 文档了解更多配置详情，其中包含了各种报告格式。 可以增加真实ip的记录； nginx中配置12345678910111213141516171819202122 proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; ``` - tomcat中server.xml配置 ``` xml &lt;Valve className="org.apache.catalina.valves.AccessLogValve" directory="logs" prefix="localhost_access_log" suffix=".txt" pattern="%&#123;X-FORWARDED-FOR&#125;i %h %l %u %t &amp;quot;%r&amp;quot; %s %b" resolveHosts="false"/&gt; ``` - 2) 使用Log4j - 过配置 Tomcat 使用 log4j- 修改默认的链接参数配置： - 默认值： ``` xml &lt;Connector port="8080" protocol="HTTP/1.1" connectionTimeout="20000" redirectPort="8443" /&gt; 修改为：``` xml 附录解答环境 export 在子shell，父shell中的变量传递 子 shell 对父 shell 里 export 出来的变量进行修改并不能影响到父 shell 子 shell 只是在“导出变量列表“里对该变量进行了一个拷贝。但反过来，父shell再次更改此变量时，子 shell 再去读时，读到的是新值，而不是原来的值。 为什么要用jsvc Jsvc is a set of libraries and applications for making Java applications run on UNIX more easily. Jsvc allows the application (e.g. Tomcat) to perform some privileged operations as root (e.g. bindto a port &lt; 1024), and then switch identity to a non-privileged user. 使用jsvc管理Tomcat的运行，相比使用其他方式最大的优势是可以使Tomcat以root身份做一些非root身份做不了的事，例如绑定端口到小与1024的端口，例如80。 通常为了安全考虑，linux服务器上运行Tomcat程序的进程其身份均不为root，这为Tomcat的正常使用带来了一些限制，使用jsvc恰好可以弥补这些限制带来的不足。 资料 http://tomcat.apache.org/tomcat-8.5-doc/setup.html http://tomcat.apache.org/tomcat-8.5-doc/RUNNING.txt http://tomcat.apache.org/tomcat-8.5-doc/BUILDING.txt http://commons.apache.org/proper/commons-daemon/jsvc.html http://www.jikexueyuan.com/course/2064_3.html?ss=1 http://www.jikexueyuan.com/course/2064_3.html?ss=1 http://www.wellho.net/mouth/2163_CATALINA-OPTS-v-JAVA-OPTS-What-is-the-difference-.html http://blog.csdn.net/sunlovefly2012/article/details/47395165 http://blog.csdn.net/lifetragedy/article/details/7708724 http://ihuangweiwei.iteye.com/blog/1233941 http://www.cnblogs.com/ggjucheng/archive/2013/04/16/3024731.html http://www.apelearn.com/study_v2/chapter23.html http://blog.csdn.net/hanzheng260561728/article/details/51236131 http://blog.csdn.net/attagain/article/details/38639007]]></content>
      <categories>
        <category>IT</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
        <tag>Tomcat优化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【原创】带你更好地理解和使用Git]]></title>
    <url>%2F2017%2F05%2F16%2FGit-Usage%2F</url>
    <content type="text"><![CDATA[公司前段时间已经从svn中迁移到git，但是发现开发在使用的过程中会遇到很多的问题。所以打算把自己学习的整理的笔记通过博客分享出来，并且后续会更新遇到的一些问题以及解决，如有时间也会后续详细整理一些操作。建议大家抽空看看《Git权威指南》，这本书比较系统讲述知识点。本博客主要是面向对工作使用Git而未深入了解的人。当然我觉得是适合新手的，git老司机可以查阅补漏或者可以评论补充 :) 一、名词解释 Git:是一款免费的、开源的、分布式的版本控制系统。旨在快速高效地处理无论规模大小的任何软件工程。 每一个 Git克隆 都是一个完整的文件库，含有全部历史记录和修订追踪能力，不依赖于网络连接或中心服务器。其最大特色就是“分支”及“合并”操作非常快速、简便。 工作空间: (工作树,working directory, working tree, working space)我们在硬盘中创建的文件， 在编辑器可直观显示。官方解释： The working tree is a single checkout of one version of the project. These files are pulled out of the compressed database in the Git directory and placed on disk for you to use or modify. 缓存区: (暂存区, index, staged spashot, stage, staging Area )是工作空间和本地仓库的中转站，工作空间可通过add到缓存区。提交代码、解决冲突的中转站。 官方解释： The staging area is a file, generally contained in your Git directory, that stores information about what will go into your next commit. It’s sometimes referred to as the “index”, but it’s also common to refer to it as the staging area. The basic Git workflow goes something like this: You modify files in your working tree. You stage the files, adding snapshots of them to your staging area. You do a commit, which takes the files as they are in the staging area and stores that snapshot permanently to your Git directory. 本地仓库: (local repo, commit history)在本地存储提交变动。 远程仓库: (remote repo)在远程用于存储提交变动的。 Git的提交操作流程：本地更改之后，流程顺序如下 工作空间 –add(或叫index)–&gt;暂存区–commit–&gt;本地仓库–push–&gt;远程仓库 二、Git和SVN的对比 我们公司对svn倒是没有使用很多高级的东西。但我们要用好它，需要我们了解更多。接下来我们就通过Git和SVN对比的优劣势，来更深入地了解Git。 2.1 Git的优势1. 操作速度快 主要列出一些操作来说明速度快。 提交快：本地的仓库的提交都是针对本地的，而不是像svn上传到中央服务器。 合并快：支持同一目录下即可切换不同的分支，合并的速度远比svn快。 查看历史快 2. 支持离线工作，减轻解决合并的冲突的工作，更好地协同开发 git把内容按元数据方式存储，完整克隆版本库。所有版本信息位于.git目录中，它是处于你的机器上的一个克隆版的版本库，它拥有中心版本库上所有的东西，例如标签、分支、版本记录等。 所以可以在本地操作指令，例如提交、查看历史、合并、创建分支等。即便出问题，在你本地的操作并不影响了其他的开发者操作。 3. 更好的回退机制 这个支持回退 你index(即 add)或者commit的一个问题或者整个代码的回滚，也可以撤销之前的操作。 svn也是支持回退，一般是重新提交修复，但是假设过程中错误提交了超大的文件，想在历史记录永远删除以防止大文件仍然存在服务器中（因为历史记录），svn就乏力了 4. 工作进度空间的保留 svn如果需要保留当前的工作进度空间，一般会在其他目录建立新的文件然后load或者切换到对应的分支，进行操作。 但是git支持在原目录上，对于在index和未index的改动的东西，可以通过git stash来保留未提交的内容（但是 unstrack file文件不行，即新增的未index的不行 ）。然后你就可以开发你的紧急任务等。 5.分布式存储，可减少故障时丢失代码 git把内容按元数据方式存储，完整克隆版本库。所有版本信息位于.git目录中，它是处于你的机器上的一个克隆版的版本库，它拥有中心版本库上所有的东西，例如标签、分支、版本记录等。 每个代码库都存有这些信息，服务器故障时可以回复全代码及历史版本。 6.现在已经流行，很多社区和大公司在用，有学习和使用的必要 2.2 Git的劣势1. 学习成本不低 命令多且复杂 git有很多命令行，如果没认真学习或者梳理的话，很容易搞乱或者不理解。例如 git checkout是可以切换分支，也可以撤销工作空间的改动的文件，加个参数-b就变成创建新分支。因为涉及不同的分支，工作空间，缓存区，本地仓库，远程仓库，所以比如常用的撤销指令都有变的很多。比svn多却复杂。 发现现在很多人也像svn的图形操作界面一样操作git，可以简单点，但是仍然远比svn复杂。 概念多 需要了解 工作空间，缓存区、索引、本地资源库、远程资源库、远程、提交、treeishes、分支和 stash。 2. 资源权限控制弱 虽然可以在远程对某些分支进行保护，限制写或者合并的操作，分支不支持像svn有严格的权限管理， 可以按组、按个人进行针对某个子目录的权限控制。区分读、写权限。更严格的，不支持回退操作。保证代码永远可以追踪。 3. 不支持支持局部更新 SVN由于是在每个文件夹建立一个.svn文件夹来实现管理，所以可以很简单实现局部更新、还原和权限管理。假如你只希望更新某些部分，则svn可以很好实现。同时代码写错了，同时可以很好实现局部还原，当然git也可以通过历史版本还原，但是无法简单地实现局部还原。 三、Git本地上主要功能以及常用的指令 主要是对常用的进行介绍，详细请看同时并不会详细介绍每个指令，如需要详细看请通过 1git help &lt;你要了解的指令&gt; 3.1 创建空Git库 或者 重置 cd 到你选择的目录（cd 到改目录）后执行下面指令: ([初始化仓库— 执行成功，会生成.git目录。这个.git目录存储着管理当前目录内容所属的仓库数据]) 12cd 到你选择的目录git init 3.2 查询1.查看当前空间以及暂存区的状态 （git-status,git-diff） 查看对本地空间、暂存区的文件更改。 1git status 加参数-s是简略输出，默认是–long。 查看具体内容的区别 123git diff --work-diff #会逐字进行对比git diff #查看当前工作区与暂存区的差别 git diff --cached //查看暂存区和本地仓库的差别 git提取补丁的方式不是通过git diff.需要注意提取补丁和打补丁的方式与linux不一样。Git提取补丁的方式 12345678#步骤1 提取补丁，#生成文件如：0001-commit-third-times-again.patch 0002-commit-G1.patch#其他方式例如： git format-patch HEAD~3...HEAD git format-patch 1.0.0...HEAD #1.0.0 是里程碑(tag标签)其他的方式应该也可以的#步骤2. 如需要，可发送邮件git send-email 000*.patch#步骤3.恢复或者更新到版本库（不能使用 patch）补丁修复git apply xxx.patch Linux提取和补丁和修复的方式: 12345678#将比较结果保存到patch文件 diff -u origin.java origin_new.java &gt; patchfile#对origin.java应用patch文件（升级），并备份（origin.java.orig） patch -b origin.java patchfile #升级成功，此时origin.java和origin_new.java是一样的 diff origin.java origin_new.java #将origin.java回退到“旧版本”,#回退成功，和“旧版本”是一样的,可通过diff origin.java origin.java.orig 对比 patch -R origin.java patchfile 查看工作区和暂存区的文件 1234567#列出工作空间的(linux指令)，或者窗口查看文件find . -path "./.git" -prune -o -type f -name "System*.java" -printf "%-20p\t%s\n" //输出大小find . -path "./.git" -prune -o -type f -name "System*.java" -print //不输出大小的#列出暂存区的文件git ls-files //支持使用管道git ls-files -s //额外输出 mode,stage number 查看被忽略的文件 1git status --ignored -s 2.git-log查提交记录123456git log -- &lt;files&gt; //查看提交的历史（HEAD之前的，之后的版本无展示） git log --pretty=oneline //只显示提交信息的第一行git log **-p** [&lt;file&gt;] //会显示**文件的提交信息以及前后差别**git log --graph //可以用图表形式输出提交日志 --也可以看到 图表形式分支的提交git log --graph --pretty=oneline --abbrev-commit //查询合并情况 3.git-reflog 查操作记录1git reflog -- &lt;files&gt; //查看历史操作记录。 查看当前仓库执行过的操作的日志 注意：回退到某个版本之后，HEAD指向该版本，git log是查询HEAD之前的版本－－即新版的（当前HEAD之后的）看不到。 使用git reflog 查看操作记录 4.git-blame 文件追溯当事情出错时，先去指责别人是人类的天性之一。如果你的产品服务器挂了，使用git blame命令可以很容易找出罪魁祸首。这个命令可以将文件中的每一行的作者、最新的变更提交和提交时间展示出来。 123git blame &lt;file&gt; //会输出每一行的详细修改信息:包括SHA串,日期和作者git blame -L 6,+5 &lt;file&gt; //6行及后面的5行git blame -L 6,10 &lt;file&gt; //6~10行 5.git-branch 查看分支123456git branch -a //查看所有版本git branch //查看分支git branch -r //查看远程分支git rev-parse --symbolic --branches //显示当前的分支git rev-parse --symbolic --tags //显示当前的tag,有术语称 里程碑 3.3 添加到暂存区123456#方式一：添加到 暂存区(Stage或者Index)git add &lt;files&gt; #方式二：交互式选择性界面进行添加（如果文件众多，推荐这个）,可以进行分类进行选择并且可同时选座多个git add -i#方式三：交互式查看内容差异选择git add -p //每项变动会让你确认， 输入 y 来暂存该块,输入 n 不暂存, 输入 e 手工编辑该块，输入，d 退出或者转到下一个文件... 参数 -u代表将文件的修改、文件的删除，添加到暂存区，默认就是 -u， -A代表将文件的修改，文件的删除，文件的新建，添加到暂存区。， 3.4 提交到本地仓库1234#方式一： 基本上用这个git commit -m "描述" #方式二： 危险，慎用。git add 和 git commit的结合。直接提交到仓库git commit -am "描述" 3.5 删除123456789 rm &lt;files&gt; //本地删除，如需要更新暂存区，需要add，如需要提交本地库则需要commit,下面的指令同理 git rm &lt;files&gt; //从HEAD中（即已提交）删除，放在stage里（未提交） git rm --cached &lt;files&gt; //从stage中（即已index）删除，放在workding里（工作空间） #查看哪些文件和目录会被删除git clean -nd //查看remove Untracked files(即删除本地多余的文件和目录，未add新增的文件)#删除 Untracked files git clean -fd //remove Untracked files 3.6 想后悔（撤销）1.修改提交信息1git commit --amend //修改提交信息 2.压缩历史记录把这次的提交和之前的提交 这两个历史记录 压缩成一个历史记录，场景举例：例如发现已经提交的内容中有些拼写错误等，rebase将这个修改包含前一个提交之中，压缩成一个历史记录 1git rebase -i HEAD~2 //修改提交信息 3.还原文件（可用交互方式） 撤销working directory(工作区)级别的 123456789#还原未add(即未index)的文件 ---&gt;从stage还原到工作区 git checkout -- &lt;files&gt;#还原未add(即未index)的所有文件（很危险，本地修改的会无声息地被覆盖）git checkout -- .#还原某个分支上文件。uncommit &amp; unstage &amp; unworkspace.当前仓库以及stage修改的会无声息地被覆盖 git checkout branch -- &lt;files&gt; #从历史中还原已经被删除的（假设刚提交的删除，可从上次（即HEAD~1）中恢复）git checkout HEAD~1 -- &lt;files&gt; //从历史中恢复某文件 撤销stage(暂存区)级别的 12345678#unstage(不会回退commit的), 还原已经add(即已经index)的到工作区 --&gt;从HEAD还原到stage git reset HEAD &lt;files&gt;#unstage(不会回退commit的), 还原已经add(即已经index)的到工作区 --&gt;从HEAD还原到stagegit reset -- &lt;files&gt;#unstage所有的文件(不会回退commit的),还原所有已经add git reset HEAD3) git checkout branch -- &lt;files&gt; 撤销commit(本地仓库)级别的commid_id 获取方式：①可通过 git log 取前几位即可，只要不冲突 ② git reflog查看历史操作记录。commit_id也可通过 HEAD^（上次的） or HEAD^^（上上次的） or HEAD~100 or 版本号(前几位即可) 12345678910#uncommit &amp; unstage //，会回退commit和index信息git reset &lt;commit_id&gt; //(git reset --mixed 是默认的，会回退commit和index信息)#uncommit,不回退index信息 git reset --soft &lt;commit_id&gt; #uncommit &amp; unstage &amp; unworkspace,会回退commit、index和工作区(workspace)信息#文件全部回退到当前版本，不可恢复。慎用！！！当可以撤销操作恢复 git reset --hard &lt;commit_id&gt; #从历史中还原已经被删除的（假设刚提交的删除，可从上次（即HEAD~1）中恢复）git checkout HEAD~1 -- &lt;files&gt; //从历史中恢复某文件 撤销reflog(操作)级别的（通过 git reflog查commid id） 1234567#会回退这个reflog下一个操作到workspace git reset &lt;commit_id&gt; #会回退这个reflog下一个操作到index里 git reset --soft &lt;commit_id&gt; #会直接回退到这个版本,//文件全部回退到当前版本，git log不可恢复。#慎用！！！但是可以通过 git reflog git reset --hard &lt;commit_id&gt; 3.6 分支管理1.查看分支（git branch）1234567git branch -a //查看所有版本git branch //查看分支git branch -r //查看远程分支git rev-parse --symbolic --branches //显示当前的分支git rev-parse --symbolic --tags //显示当前的tag,有术语称 里程碑 2.创建分支（git branch 和git checkout -b）12git checkout -b &lt;分支名&gt; //创建分支并切换分支，等价于(git branch + git checkout)git branch &lt;分支名&gt; //创建分支 3.切换分支(git checkout)12git checkout &lt;分支名&gt; //切换分支（本地库已经存在的）git checkout - //切换回上一个分支 4.从远程更新分支(git fetch 和 git pull)1234567#获取更新但不合并(git fetch只会将本地库所关联的远程库的commit id更新至最新),但是本地不更新git fetch &lt;远程主机名&gt; //远程主机名默认是origin，一般都是这个 git fetch &lt;远程主机名&gt; &lt;分支名&gt; //限定更新某个分支#获取更新但是合并(因为涉及merge，会有冲突，请查看**4.4分支管理-解决冲突**部分)git pull &lt;远程主机名&gt; //默认匹配与本地分支名一样的远程分支。git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt; 网上说git pull相当于 git fetch+git merge,从本地库结果上看一样），但是本地的远程库信息不会更新。例如，假设远程新建了分支，git pull不会更新，但是git fetch+git merge会更新，详细可看git fetch和git pull之间的区别. 如果git pull有冲突的时，是需要解决的。请查看4.4分支管理-解决冲突部分 5.删除分支 12345678#删除本地分支git branch -d dev#删除远程库git remote rm &lt;分支名&gt; #删除远程库已经不存在的分支(是指删除 本地远程库在远程库不存在的，不会删除本地的)git remote prune origin 6.合并分支12git merge &lt;分支&gt; git merge --no-commit &lt;分支&gt; 举例说明，假设分支dev开发完毕，想要将它合并到主干分支master中 1234#①首先 切换到master分支git checkout master#②合并分支dev，为了在历史记录中明确记录下本次分支合并，我们需要创建合并提交。 ---&gt; 在合并时加上 --no-ff参数 git merge --no-ff dev 7.解决冲突 现在的冲突一般由以下的指令： 123 git merge //自动合并，如果有同个类改动的话，可手工修改文件修复git pull //git fetch--&gt; git merge（解决可参看git push的前两步骤）git push //git fetch--&gt; git merge --&gt; git push 下面以git push为例，因为他包含了其他指令冲突的操作，git pull冲突会报rejected的失败，解决这个冲突一般流程是： 12345 git fetch //更新本地的远程库git merge origin/&lt;分支名&gt; //自动合并，如果有同个类改动的话，可手工修改文件修复 //如果改了同个类，自动合并并不会成功，可通过看 git status对应的文件，可通过修改对应的文件解决冲突。比如删除&lt;&lt;&lt;===&gt;&gt;&gt;之间的。图形界面可通过 git mergetool来进行。git push //push 到远程git log -l -m --stat //可以查看合并所做的修改 由于现在比较喜欢的是通过IDEA的git插件和window的Tortoise git来图形界面解决冲突。他们合并的时候会告诉你哪些是冲突的，例如Tortoise git会标红，然然一个一个地解决冲突，大体都一直，有三个窗口，一个窗口是本地，一个远程的，一个解决冲突后代码展示。解决后有些标记下已解决。 四、Git与远程交互的一些操作4.1 获取远程Git项目 如果涉及到分支的操作，请查看4.4分支管理 从远程中克隆项目(git clone) 12git clone &lt;地址&gt; //Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。git clone -b &lt;分支名&gt; &lt;地址&gt; //克隆一个 分支 获取远程的分支（即在本地创建一个和远程名称一样的本地分支） 1git checkout -b local-branchname origin/remote_branchname 从远程的分支根更新本地(git fetch,git pull) 1234567#获取更新但不合并(git fetch只会将本地库所关联的远程库的commit id更新至最新),但是本地不更新git fetch &lt;远程主机名&gt; //远程主机名默认是origin，一般都是这个 git fetch &lt;远程主机名&gt; &lt;分支名&gt; //限定更新某个分支#获取更新但是合并(因为涉及merge，会有冲突，请查看**4.4分支管理-解决冲突**部分)git pull &lt;远程主机名&gt; //默认匹配与本地分支名一样的远程分支。git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt; 网上说git pull相当于 git fetch+git merge,从本地库结果上看一样），但是本地的远程库信息不会更新。例如，假设远程新建了分支，git pull不会更新，但是git fetch+git merge会更新，详细可看git fetch和git pull之间的区别. 如果git pull有冲突的时，是需要解决的。请查看4.4分支管理-解决冲突部分 4.2 关联远程仓库 是否拥有远程库（公司的也可以，如已拥有则跳过） 创建SSH Key gm-keygen -t rsa -C &quot;youremail@example.com” #根目录（用户主目录下，如果有.ssh目录，同时这个目录下有id_rsa和id_rsa.pub这两个文件 ＝＝》已安装） 登陆GitHub，打开“Account settings”，“SSH Keys”页面：点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容 添加远程库登陆GitHub-&gt;Create a new repo-&gt;Repository name填入learnGit， —&gt;Create repository 本地关联远程(git remote) 1234git remote add origin &lt;git地址&gt; //远程主机名的名字就是origin，这是Git默认的叫法）r#取消关联git remote rm origin 推送到远程库(git pull) 1234#第一次推送，把本地库提交的内容推到远程库（需私钥，故只有自己可以）git push -u origin &lt;分支名&gt; //第一次一般是master,当前分支的内容就会被推送给远程仓库origin#非第一次推送 (可能会遇到冲突，是需要解决的。请查看**4.4分支管理-解决冲突**部分) git push origin &lt;分支名&gt; 第一次推送master分支时，加上了-u参数，1. Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。 2. 参数可以在推送的同时，将origin仓库的master分支设置为本地仓库当前分支upstream(上游). 添加了这个参数，将来在git pull命令从远程获取内容，省去了另外添加参数的麻烦 如果git push有冲突的时，是需要解决的。请查看4.4分支管理-解决冲突部分 PS:有任何关于的问题，欢迎来评论讨论交流。 五、参考网站 参考《Git权威指南》]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>git remote</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【原创】如何使用hexo的NexT主题]]></title>
    <url>%2F2017%2F05%2F15%2Fhow-to-use-the-theme-next-for-hexo%2F</url>
    <content type="text"><![CDATA[之前使用的hexo的jacman,但是发现还是没hexo的nexT的简约，而且nexT本身就自配置了各种第三方插件，你需要开启和设置对应一些你的参数即可。所以果断选他。这篇博客主要是简单带过并且补充一些我走过坑和一些注意事项。欢迎评论和交流。 一、名词解释 NexT: 是hexo的一个主题，你可以换各种hexo主题，而保持原有内容不变。 Hexo: 是高效的静态站点生成框架，基于 Node.js。 通过 Hexo 你可以轻松地使用 Markdown 编写文章，除了 Markdown 本身的语法之外，还可以使用 Hexo 提供的 标签插件 来快速的插入特定形式的内容。特点：超快速度(渲染速度)，支持markdown,一键部署，丰富的插件 npm: 是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题 允许用户从NPM服务器下载别人编写的第三方包到本地使用。 允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。 允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。 站点配置文件:一份位于站点根目录下，主要包含 Hexo 本身的配置。位置：your-hexo-site/_config.yml 主题配置文件:位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。位置: your-hexo-site/themes/主题名/_config.yml。例如next的就是your-hexo-site/themes/next/_config.yml 二、Hexo安装指南2.1 条件 先安装好Git和Node.js （详细的安装过程见官方教程） 2.2 Hexo的安装1.安装Hexo 所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。 1＄npm install -g hexo-cli 2.初始化Hexo 先转到自己自定的文件，作为Hexo的根目录（这时候可以省略的参数） 123$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install 2.3 Hexo主题安装 Hexo 安装主题的方式非常简单，只需要将主题文件拷贝至站点目录的 themes 目录下， 然后修改下配置文件即可。 2.4 Hexo目录简介详细看图片： 三、NexT主题安装指南3.1 条件 先安装好Git和hexo （详细的安装过程可参考官方教程）（本人的是mac os x，直接brew install指令即可） 3.2 主题安装步骤1.下载主题【方式一:Git的方式】 在终端窗口下，定位到 Hexo 站点目录下。使用 Git checkout 代码： （推荐此方式，之后的更新可以通过 git pull 来快速更新， 而不用再次下载压缩包替换。） 12$ cd your-hexo-site$ git clone https://github.com/iissnan/hexo-theme-next themes/next 【方式二:下载稳定版本】 前往 NexT 版本 发布页面。 选择你所需要的版本，下载 Download 区域下的 Source Code (zip) 到本地。例如，下载 v5.1.1 版本 解压所下载的压缩包至站点的 themes 目录下， 并将 解压后的文件夹名称（hexo-theme-next-5.1.1）更改为 next 2.站点配置主题打开站点配置文件找到 theme 字段，并将其值更改为 next。 1theme: next 到此，NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前， 我们最好使用 hexo clean 来清除 Hexo 的缓存。 注意事项：yml每项配置冒号:后面需要加空格的 3.验证主题在hexo站点目录下，启动本地站点 1hexo server 可简写”hexo s“, 可以开启debug模式 “hexo server -debug“. 此时即可使用浏览器访问 http://localhost:4000 ，检查站点是否正确运行。 3.3 使用（可参考官方教程 ) 1.新建一篇文章1hexo new [layout] &lt;title&gt; 新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。 2.发表草稿12hexo publish [layout] &lt;filename&gt; #发表草稿hexo --draft #显示草稿的文章 3.生成静态文件 把markdown、主题等生成静态文件 1hexo generate 可简写 “hexo g“， 通过””hexo deploy -g“也是生成静态文件。 “hexo generate -d“ 生成后立即部署。 4.启动服务器1hexo server 启动服务器。可简写 “”hexo s“，默认情况下，访问网址为： http://localhost:4000/ 。 选项 描述 -p, –port 设置服务的端口号 -s, –static 只使用静态文件 -l, –log 启动日记记录,使用覆盖记录格式 5.部署网站1hexo deploy 部署网站到github上。选项-g, –generate部署之前预先生成静态文件 6.清除缓存文件 (db.json) 和已生成的静态文件 (public)。1hexo clean 清除缓存文件 (db.json) 和已生成的静态文件 (public)。在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。 7.列出网站资料1hexo list &lt;type&gt; 四、NexT主题定制化以及第三方配置指南4.1 我的主题定制的情况： 修改主题配置文件的。本身NexT主题里面有配置很多的第三方插件配置，所以只需要打开和对应配置你的一些App_ID即可。 1.修改主题scheme1scheme: Pisce 2.设置代码高亮1highlight_theme: night bright 3.修改侧边栏链接链接放置在 social 字段下，一行一个链接。其键值格式是 显示文本: 链接地址 123456social: #LinkLabel: Link GitHub: https://github.com/jamfliu 微博: http://weibo.com/jamfliu 豆瓣: http://douban.com/people/jamfliu 知乎: http://www.zhihu.com/people/jamfliu 4.设置头像和site的favicon 修改字段 avatar， 值设置成头像的链接地址。其中，头像的链接地址可以是： 1avatar: images/lzf.png 下面是设置favicon。 1favicon: images/lzffavicon.ico 4.2 我的第三方插件定制的情况：1.统计阅读量 原本我是申请了leancloud的appId和appKey，后面发现不蒜子统计中也包含了阅读量，所以我就配置但没用。 方式一：使用leancloud 首先申请它的AppID以及AppKey，在next的主题配置文件中找到leancloud，然后配置，主要是配置enable: true,然后填入你的AppID以及AppKey 方式二：使用不蒜子统计中的page_pv项 直接使用enable: true即可 2.增加评论功能 之前使用的多说已经要停了，所以改用了DISQUS，但是发现在国内的网络加载它的js老超时，果断换了一个，本想还网易云跟帖的，但是注册老有问题，而且支持的社交少。选了韩国的来必力，还算挺好用的，注册都不麻烦，就是获取验证码的时候是韩文有点恶心，不是全程中文的。 申请来必力的你自己的安装代码，注册完取data-uid里面的代码。然后设置livere_uid 1livere_uid: MTAyMC8y11222Y3NS800000 3.统计自己网站的流量情况 1) 不蒜子统计 这个不需要去注册，打开即可可以统计本站点的总的pv和uv量，也可以统计单个页面的pv量。 编辑主题配置文件中的busuanzi_count的配置项。 当”enable: true“时，代表开启全局开关。若site_uv、site_pv、page_pv的值均为false时，不蒜子仅作记录而不会在页面上显示。 2) 百度统计 为了后续方便分析，增加了百度统计，使用了百度统计，并不会给网站速度带慢的情况。 申请你的自己的错误码，然后设置”baidu_analytics“为你自己的脚本ID即可 4.增加搜索功能,即站内搜索 NexT主题支持集成 Swiftype、 微搜索、Local Search 和 Algolia,Swiftype和Algolia都只有一段时间的试用期，可以采用Hexo提供的Local Search,原理是通过hexo-generator-search插件在本地生成一个search.xml文件，搜索的时候从这个文件中根据关键字检索出相应的链接。 1） 安装 hexo-generator-searchdb，在站点的根目录下执行以下命令 12npm install hexo-generator-searchdb --savenpm install hexo-generator-search --save 现在官方文档漏了下面一条语句，会导致生成不了search.xml 2） 在站点配置文件末尾中新增下面的配置项 12345search: path: search.xml field: post format: html limit: 10000 3） 在主题配置文件启动本地搜索 12local_search: enable: true 【过程中遇到的问题】：查不了，发现是无生成search.xml 也没有报错，似乎是node的版本不支持，我通过 npm upgrade和更新brew upgrade node[我的是mac os]来解决 5.内容分享功能 百度分享和JiaThis都不支持https，我已经关闭了，本地使用了JiaThis可以，如需要配置也很简单。 编辑 主题配置文件， 添加/修改字段 jiathis，值为 true。 6.字数统计功能 1） 安装hexo-wordcount，在站点的根目录下执行以下命令 1npm install hexo-wordcount --save 2）修改配置文件 方式一：采用默认配置的方式： 1234post_wordcount: item_text: false wordcount: true min2read: true 方式二：自定义的方式 ①为了方便地开启和关闭字数统计功能，我们需要在配置文件（站点配置文件或主题配置文件均可）中添加一个键值对： 12# 开启字数统计word_count: true ②修改主题的swig布局，themes/next/layout/_macro/post.swig** (看了这个swig，似乎默认支持的，虽然字段和结构不一样，但是我怎么配都不成功，所以新增了) 123456&#123;% if theme.word_count %&#125; &lt;span class="post-letters-count"&gt; &amp;nbsp; | &amp;nbsp; &lt;span&gt;&#123;&#123; wordcount(post.content) &#125;&#125; 字&lt;/span&gt; &lt;/span&gt;&#123;% endif %&#125; 4.3 出现过的问题汇总：出现解决较久的问题有： 1.启动的时候发起请求的时候报错ENOENT, no such file or directory 12345678INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.Unhandled rejection Error: ENOENT, no such file or directory '/Users/liuzhenfeng/git/blog_hexo/themes/next/layout/_scripts/schemes/.swig' at Error (native) at Object.fs.openSync (fs.js:500:18) at Object.fs.readFileSync (fs.js:352:15) at Object.ret.load (/Users/liuzhenfeng/git/blog_hexo/node_modules/hexo/node_modules/swig/lib/loaders/filesystem.js:55:15) .... at process._tickCallback (node.js:355:11) ==&gt;原因： 配置项的冒号后面无空格，比如错误的配置：（后面少了一个空格） 1AppID:XXX 正确的配置是冒号后面加空格，如下： 1AppID: XXX 2.执行 “npm install hexo-generator-searchdb –save“时，报如下的错误12345npm WARN engine hexo-generator-searchdb@1.0.7: wanted: &#123;"node":"&gt;= 4.2.2"&#125; (current: &#123;"node":"0.12.7","npm":"2.11.3"&#125;)hexo-generator-searchdb@1.0.7 node_modules/hexo-generator-searchdb├── utils-merge@1.0.0├── striptags@3.0.1└── ejs@1.0.0 我通过 npm upgrade和更新brew upgrade node[我的是mac os]来解决，发现都是失败了，后来确定node是指nodejs就找了nodejs的更新方式： 1234#第一步：首先安装n模块：npm install -g n#第二步：升级node.js到最新稳定版n stable 网上说这种解决办法有问题，所以要卸载干净之后重装 123456brew uninstall node #卸载，但是重新安装是会提示卸载不干净，需要额外删除一些#以下是额外删除，主要根据错误提示rm -f /usr/local/lib/dtrace/node.drm -f /usr/local/share/systemtap/tapset/node.stprm /usr/local/share/man/man1/node.1rm -rf /usr/local/lib/node_modules 3.执行hexo操作时，报ERROR Script load failed(exturl.js)情况：执行hexo操作时，报ERROR Script load failed: themes/next/scripts/tags/exturl.js解决办法：重新安装hexo-util模块1$ npm install -- save-dev hexo-util 4.报错：ERROR Plugin load failed: hexo-git-backup解决办法：重新安装hexo-git-backup模块1$ npm install hexo-git-backup --save 5.报错：ERROR Deployer not found: git1$ npm install hexo-deployer-git --save 6.报错：Template render error: (unknown path)1234FATAL Something's wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.htmlTemplate render error: (unknown path) [Line 55, Column 232] unknown block tag: endif at Object.exports.prettifyError (/Users/liuzhenfeng/git/blog_hexo/node_modules/nunjucks/src/lib.js:34:15) 报这个错误的时候，比较容易确定是我心中md文件出问题了，但是具体是什么错误，一头雾水，严重影响到我的进度，m这个错误所指向的js我是没接触过的。最终我用了打印md文件前多少行，来确定第几行出错了。 ==&gt;原因：在字数统计功能的说明修改swig文件的的代码不小心动了一个字符，把那个统计文章字数的那段代码的”{“ –&gt; “&gt;”导致的报错 。改回去即可修复。 PS:有任何关于的问题，欢迎来评论讨论交流。 五、参考网站 Hexo的官方文档 NexT的官方文档 为Hexo NexT主题添加字数统计功能]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
        <tag>how</tag>
        <tag>第三方插件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[［转］如何使用 Jacman 主题]]></title>
    <url>%2F2015%2F07%2F29%2Fhow-to-use-jacman%2F</url>
    <content type="text"><![CDATA[Jacman 是一款扁平化，有着响应式设计的 Hexo 主题。本站正式使用了 Jacman 主题。Jacman 基于 Pacman 主题修改而来，而今已有很多特性与原主题不同。你可以前往本站和 Demo 预览更多关于本主题的更多效果。如果你有任何问题或意见欢迎到 GitHub 发表 issue。 主题介绍Jacman 是一款扁平化，有着响应式设计的 Hexo 主题。本站正式使用了 Jacman 主题。Jacman 基于 Pacman 主题修改而来，目前已有很多特性与原主题不同。你可以前往 本站 和 Demo 预览更多关于本主题的更多效果。如果你有任何问题或意见欢迎到 GitHub 发表 issue。 距离当初我把 Jacman 开源至今已有半年零一周了，在这半年里也一直保持着对 Jacman 的更新。看到很多人用这款主题，fork&amp;star 数也越来越好看，我也更有动力继续完善 Jacman。Jacman 自然还有很多改进空间，首先是文档问题，有许多人通过博客、微博、QQ 询问我有关主题的问题，我也意识到之前写的帮助手册可读性太差。正好趁着这次 Jacman 大更新，写篇更详尽、readable 的手册。 安装指南安装在博客根目录下执行如下命令。1$ git clone https://github.com/wuchong/jacman.git themes/jacman Jacman 需要安装 Hexo 2.7 及以上版本，请先升级您的 Hexo 程序，再启用此主题。 启用修改你的博客根目录下的_config.yml配置文件中的theme属性，将其设置为jacman。同时建议设置stylus属性中的compress值为true，会自动压缩 CSS 文件，hexo默认配置中不包含这一项，建议开启。如下。123theme: jacmanstylus: compress: true 更新12cd themes/jacmangit pull origin master 请先备份您主题目录下的 _config.yml 文件后再升级。 配置指南Jacman 主题提供了丰富的配置属性，可以实现您对主题的自定义。配置文件_config.yml位于主题根目录下。本次更新对配置文件进行了较大调整，如您之前就使用了 Jacman，也需要您根据以下指南进行相应的修改。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102##### 菜单menu: 主页: / 归档: /archives 关于: /about#### 控件widgets: - category- tag- links- rss#### RSS rss: /atom.xml #### 图片相关imglogo: enable: true ## 是否显示网站 logo src: img/logo.png favicon: img/favicon.ico ## 网站图标 apple_icon: img/jacman.jpg ## 苹果设备上的图标，背景不要透明author_img: img/author.jpg ## 网站底部的博主头像banner_img: img/banner.jpg ## 博客顶部的图片### 主题颜色theme_color: theme: '#2ca6cb' ##默认主题颜色为蓝色close_aside: false ##是否在文章页面自动关闭侧边栏#### 首页相关index: expand: true ## 首页文章是否展开。默认为展开式，显示 Read More。 excerpt_link: Read More #### 作者信息author: intro_line1: "Hello ,I'm Larry Page in Google." ## 网站底部的个人介绍 intro_line2: "This is my blog,believe it or not." weibo_verifier: ## 微博秀的验证码 tsina: ## 用于微博秀和微博分享 weibo: ## 用于显示网站底部社交按钮，下同 douban: zhihu: email: twitter: github: facebook: linkedin: google_plus: stackoverflow: #### 目录toc: article: true ## 是否在文章中显示目录 aside: true ## 是否在侧边栏显示目录#### 友情链接links: 码农圈: https://coderq.com,一个面向程序员交流分享的新一代社区 Jark's Blog: http://wuchong.me #### 评论duoshuo_shortname: disqus_shortname: #### 分享按钮jiathis: enable: false ## 默认使用主题内建分享 id: tsina: #### 网站统计google_analytics: enable: false id: ## google analytics ID. site: ## 网站地址.baidu_tongji: enable: false sitecode: ## 百度统计站点特征码cnzz_tongji: enable: false siteid: ## CNZZ统计站点ID#### 杂项ShowCustomFont: true fancybox: true totop: true #### 自定义搜索google_cse: enable: false cx: baidu_search: enable: false id: site: http://zhannei.baidu.com/cse/search tinysou_search: ## http://tinysou.com/ enable: false id: "4ac092ad8d749fdc6293" ###属性功能 菜单 menu默认没有启用 /tags 和 /categories页面，如果需要启用请在博客目录下的source文件夹中分别建立tags 和 categories文件夹每个文件夹中分别包含一个index.md文件。内容为： 123layout: tags (或categories)title: tags (或categories)--- &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因为主题中已经内置了这两个页面的模板，所以他们会被正确的解析出来。 控件 widgets提供了7种小工具。包括标签、标签云、分类、归档、RSS、友情链接、微博秀。 友情链接：友情链接的网址添加可以在links属性下添加。 微博秀：需要注意的是，如果要启用微博秀，您必须填上author属性下tsina和weibo_verifier的值，前者是您微博ID，后者是您微博秀的验证码，访问 http://app.weibo.com/tool/weiboshow 在如下图位置，可以获得您的 verifier，如：我的是b3593ceb。 如果要关闭侧边栏，将close_aside置为true，就会在博文页面自动关闭侧边栏。 图片相关 Image本主题可以设置网站相关图片，例如网站图标（favicon）、网站logo（imglogo）、作者头像（author_img）。建议启用网站logo，格式建议为.svg或.png格式。同时建议提供配套的 favicon 以及在苹果设备上的图标apple_icon（背景不要透明）。 首页显示模式 Index目前首页的显示模式支持两种，一种是原先的卡片式（前往 Demo 预览），另一种是类似官方主题的文章展开式（本站即采用的这种）。两者各有优劣，前者首页加载速度更快，后者文章内容更能吸引读者。主题默认采用后一种展开式，如需开启第一种卡片式，请设置index属性下的expand: false。 卡片式的文章摘要是截取文章内容的前140个字，也可以自己总结description并将其放在开头的front-matter中。展开式的文章摘要就是使用&lt;!-- more --&gt;截取了。 作者信息 author作者信息，建议尽量填写完整。其中tsina是你的新浪微博ID，不同于用户名或微博主页地址。启用这个属性后，其他用户在微博上分享你文章的同时会自动@你。同时它和weibo_verifier一起作用生成微博秀。intro_line1和intro_line2是网站底部的个人介绍。weibo、twitter、facebook等是用来显示网站右下角的社交按钮的，如下图所示。 目录 toc是否启用在文章中或侧边栏中的目录功能。二者可以都为true或都为false。同时，如果你希望在特定的某一篇文章中关闭目录功能你可以在文章文件开头中的front-matter中加上一行toc: false。如果希望在某一篇文章中关闭目录自动编号功能你可以在文章文件开头的front-matter中加上一行list_number: false。另外 hexo 2.5.2 开始支持中文目录，想获得更好的体验请升级你的 Hexo 版本。 评论 comments填写duoshuo_shortname多说的用户名，启用多说评论系统。在大陆地区更好用的评论系统。 填写disqus_shortnamedisqus 的用户名，启用 disqus 评论系统。国际上更广泛使用的评论系统。设置博客根目录下的_config.yml文件中的disqus_shortname同样也能开启该功能。 加网分享 jiathis加网分享系统。默认关闭，因为主题已经内置了原生的分享功能。 网站统计 Analyticsgoogle_analytics：Google Analytics追踪代码。请注意：Google Analytics已经升级到了Universal Analytics。请先前往后台升级你的Google Analytics版本后再启用追踪代码，更多信息请点击这里了解。 baidu_tongji：百度统计功能。需要填写站点特征码sitecode，在官网注册并配置站点后，获取特征码。特征码可以在「网站中心」-&gt; 「代码获取」中查看，如下图所示的e6d1f421bbc9962127a50488f9ed37d1，注意去掉前面的3F。 cnzz_tongji：站长统计功能。需要填写站点IDsiteid，同理在站长官网注册并配置站点后获得。 数学公式 mathjax主题支持写 LaTex 数学公式。只需要在文章文件开头的front-matter中，加上一行mathjax: true，即可在文中写 LaTex 公式。 图片浏览 fancybox默认关闭，如果你使用 Hexo 经常发表 Gallery 类型的文章，那么请设置为true。 返回顶部 totop右下角返回顶部按钮，默认开启。 自定义字体 ShowCustomFont是否启用自定义字体，默认开启，主要用于显示网站底部的字体。如果你有一定前端基础可以修改 font.styl 替换为你喜欢的字体。 自定义搜索 Searchbaidu_search：如果开启百度站内搜索需要登录 百度站内搜索，配置好你的站点，并开启站内搜索获取搜索ID，另外site属性可以填默认值，也可以填自己做了CNAME的二级域名，更详细的可以阅读这篇博客了解。 google_cse：如果开启谷歌自定义搜索需要先登录 Google CSE，配置好你的站点，并获得此自定义搜索的ID。此外你需要在博客目录下的source文件夹中建立search文件夹并包含一个index.md文件。内容为： 123layout: searchtitle: search--- tiny_search: 如果要开启微搜索，需要先注册一个帐号，配置一个Engine，将Engine的Key填入配置文件中的id即可。 主题颜色更改 Theme Color 目前官方还未支持十六进制颜色与String值的转换，所以需要手动添加依赖包，该问题估计不久后会解决。 123##在博客的目录下输入下面指令cd node_modules/hexo-renderer-stylus sudo npm install stylus@0.49.2 #根据系统文件的权限不同，有的不需要加sudo 然后更改在主题目录下的_config.yml的 theme_color 下 theme 值。123### Theme Color theme_color: theme: '#2ca6cb' ##the defaut theme color is blue ##常见问题 Q：图片默认都是居左的，我怎么设置能让图片居中呢？ 使用 &lt;img src=&quot;&quot; style=&quot;display:block;margin:auto&quot;/&gt;的HTML标签。 Q：如何建立一篇图片类文章（Gallery Post）？ 使用hexo new photo &quot;your titile&quot;建立图片类文章，或者直接新建一个 Markdown 文件，将其front-matter修改为如下，即可看到主题为图片类文章提供的样式，Demo。 1234567---layout: phototitle: Gallery Postphotos:- http://i.minus.com/ibobbTlfxZgITW.jpg- http://i.minus.com/iedpg90Y0exFS.jpg--- Q：我在配置文件中给某一项设置了值，但为什么总是看不到效果啊？ _config.yml文件中的每个属性值前面必须留一个空格，建议在 Sublime/Notepad++ 中开启显示所有空格模式。另每篇文章的 front-matter 也要注意这个问题。 Q：如何建立自我介绍页面（About 页面）？ 首先在主目录找到_config.yml，找到url添加about_dir: about到这个板块。然后在/source里面建立about文件夹。在about文件夹里建立index.md。编辑index.md就和发布其他的文章一样，格式都一样。 Q：怎么提意见和建议？ 主题还在不断完善中，欢迎 open issue 来提建议，参与讨论。 Q：楼主我不喜欢你的配色，怎么换主题的颜色呢？ 包括颜色在内的很多变量都在jacman/source/css/_base/variable.styl文件中，可以修改成你喜欢的。 Q：英语更能突显我的逼格，怎么换成英语？ 配置你的博客根目录下的_config.yml，去掉language: zh-CN。 Q：为什么我修改了配置文件/发表了博文，解析出来的却是乱码呢？ 请将你的配置文件/markdown文件保存成 UTF-8 格式。 Q：为什么开启了微博秀后，显示是空白的，没有内容展示？ 每次修改参数都会这样，需要多刷新几次或者上传到服务器上就好了。 Q：博主 Jacman Demo 站点中文章的 md 源文件在哪能看到呢？ 我将 Demo 站点所有源文件放在了 Jacman 的 site 分支下。 PS:有任何关于 Hexo 的问题，欢迎来 Hexo 中文社区 咨询。 ###参考网站 Jacman作者的blog]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Jacman</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MarkDown的用法介绍]]></title>
    <url>%2F2015%2F07%2F28%2Fmarkdown_usage_intraduce%2F</url>
    <content type="text"><![CDATA[#MarkDown的用法介绍 Markdown简介 Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。 —— 维基百科 正如您在阅读的这份文档，它使用简单的符号标识不同的标题，将某些文字标记为粗体或者斜体，创建一个链接或一个脚注[^demo]。下面列举了几个高级功能，更多语法请按Cmd + /查看帮助。 代码块1234567891011121314151617181920212223import sysipMap = &#123;&#125;ipFilters = ["10.", "172."]def isFiltered(inIp): for ip in ipFilters: if inIp.startswith(ip): return True return Falsefor line in sys.stdin: line = line.strip() if line: words = line.split(":") if words and len(words) &gt; 1: if isFiltered(words[1]): continue elif ipMap.get(words[1]): ipMap[words[1]] += 1 else: ipMap[words[1]] = 1for (key, value) in ipMap.items(): print "%-16s %d" % (key,value) LaTeX 公式可以创建行内公式，例如 $\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N$。或者块级公式： $$ x = \dfrac{-b \pm \sqrt{b^2 - 4ac}}{2a} $$ 表格 Item Value Qty Computer 1600 USD 5 Phone 12 USD 12 Pipe 1 USD 234 流程图 以及时序图: 123Alice-&gt;Bob: Hello Bob, how are you?Note right of Bob: Bob thinksBob--&gt;Alice: I am good thanks! 提示：想了解更多，请查看流程图语法以及时序图语法。 复选框使用 - [ ] 和 - [x] 语法可以创建复选框，实现 todo-list 等功能。例如： [x] 已完成事项 [ ] 待办事项1 [ ] 待办事项2 注意：目前支持尚不完全，在印象笔记中勾选复选框是无效、不能同步的，所以必须在马克飞象中修改 Markdown 原文才可生效。下个版本将会全面支持。 印象笔记相关笔记本和标签马克飞象增加了@(笔记本)[标签A|标签B]语法, 以选择笔记本和添加标签。 绑定账号后， 输入(自动会出现笔记本列表，请从中选择。 笔记标题马克飞象会自动使用文档内出现的第一个标题作为笔记标题。例如本文，就是第一行的 欢迎使用马克飞象。 快捷编辑保存在印象笔记中的笔记，右上角会有一个红色的编辑按钮，点击后会回到马克飞象中打开并编辑该笔记。 注意：目前用户在印象笔记中单方面做的任何修改，马克飞象是无法自动感知和更新的。所以请务必回到马克飞象编辑。 数据同步马克飞象通过将Markdown原文以隐藏内容保存在笔记中的精妙设计，实现了对Markdown的存储和再次编辑。既解决了其他产品只是单向导出HTML的单薄，又规避了服务端存储Markdown带来的隐私安全问题。这样，服务端仅作为对印象笔记 API调用和数据转换之用。 隐私声明：用户所有的笔记数据，均保存在印象笔记中。马克飞象不存储用户的任何笔记数据。 离线存储马克飞象使用浏览器离线存储将内容实时保存在本地，不必担心网络断掉或浏览器崩溃。为了节省空间和避免冲突，已同步至印象笔记并且不再修改的笔记将删除部分本地缓存，不过依然可以随时通过文档管理打开。 注意：虽然浏览器存储大部分时候都比较可靠，但印象笔记作为专业云存储，更值得信赖。以防万一，请务必经常及时同步到印象笔记。 编辑器相关设置右侧系统菜单（快捷键Cmd + M）的设置中，提供了界面字体、字号、自定义CSS、vim/emacs 键盘模式等高级选项。 快捷键帮助 Cmd + /同步文档 Cmd + S创建文档 Cmd + Opt + N最大化编辑器 Cmd + Enter预览文档 Cmd + Opt + Enter文档管理 Cmd + O系统菜单 Cmd + M 加粗 Cmd + B插入图片 Cmd + G插入链接 Cmd + L提升标题 Cmd + H 关于收费马克飞象为新用户提供 10 天的试用期，试用期过后需要续费才能继续使用。未购买或者未及时续费，将不能同步新的笔记。之前保存过的笔记依然可以编辑。 反馈与建议 微博：@马克飞象，@GGock 邮箱：&#x68;&#117;&#x73;&#x74;&#103;&#x6f;&#x63;&#107;&#x40;&#103;&#109;&#97;&#x69;&#x6c;&#46;&#x63;&#x6f;&#x6d; 感谢阅读这份帮助文档。请点击右上角，绑定印象笔记账号，开启全新的记录与分享体验吧。 [^demo]: 这是一个示例脚注。请查阅 MultiMarkdown 文档 关于脚注的说明。 限制： 印象笔记的笔记内容使用 ENML 格式，基于 HTML，但是不支持某些标签和属性，例如id，这就导致脚注和TOC无法正常点击。 st=>start: Start e=>end op=>operation: My Operation cond=>condition: Yes or No? st->op->cond cond(yes)->e cond(no)->op{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12} var code = document.getElementById("flowchart-0-code").value; var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value)); var diagram = flowchart.parse(code); diagram.drawSVG("flowchart-0", options);]]></content>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
</search>